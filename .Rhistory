cls()
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
z <- 100000
f(3)
lpad(9,3)
search(lpad)
printf()
format
format()
args(format)
help(format)
format(1, trim=TRUE, digits=3)
strpad(2,3,"0")
str_pad(2,3,"0")
search(str_pad)
search("str_pad")
library(stringr)
str_pad(2,3,"0")
args(str_pad)
str_pad(2,3,side="left",pad="0")
str_pad(222,3,side="left",pad="0")
str_pad(22,3,side="left",pad="0")
ezPad <- function(string, len, padChar)
{
if(length(string) == len)
{
string
}
else
{
paste(padChar, string)
ezPad(string, len, padChar)
}
}
ezPad("1", 12, "0")
str <- "test"
length(str)
strLen(str)
size(str)
nchar(str)
ezPad <- function(string, len, padChar)
{
if(nchar(string) == len)
{
return string
}
else
{
paste(padChar, string)
ezPad(string, len, padChar)
}
}
ezPad <- function(string, len, padChar)
{
if(nchar(string) == len)
{
return string
}
else
{
paste(padChar, string)
ezPad(string, len, padChar)
}
}
}
else
print "hello"
print("hello")
print("hello" + nchar(string))
string <- "hello"
print("hello" + nchar(string))
print(paste("hello",nchar(string))
)
print(paste("hello", nchar(string)))
{
file_name <- paste(str_pad(curr_id, 3, side="left", pad="0"),".csv")
source('~/RCode/RProg_Week2/Problem1.R')
clear
reset()
;
quit
}}
source('~/RCode/RProg_Week2/Problem1.R')
str <- paste(padChar, str)
}
# ezPad(str, len, padChar)
str
ezPad("jim", 10)
}
}
source('~/.active-rstudio-document')
ezPad("jim", 10)
source('~/.active-rstudio-document')
ezPad("jim", 10)
source('~/.active-rstudio-document')
ezPad("jim", 10)
source('~/.active-rstudio-document')
ezPad("jim", 10)
source('~/.active-rstudio-document')
ezPad("jim", 10)
source('~/.active-rstudio-document')
ezPad("jim", 10)
source('~/.active-rstudio-document')
ezPad("jim", 10)
ezPad("jim", 10)
ezPad("jim", 10)
help(join)
??join
str_c("Letter: " , letters)
rep.int("0", 5)
join(rep.int("0",5), sep="")
paste(rep.int("0",5), sep="")
paste(c(rep.int("0",5)), sep="")
paste(c(rep.int("0",5)), sep="", collapse="")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
lPad("jim", 10)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?paste
sprintf("%05i%g",12,"dir")
sprintf("%05i%s",12,"dir")
source('~/.active-rstudio-document')
lPad("1")
source('~/.active-rstudio-document')
lPad("1")
lpad(1)
lPad(1)
paste(str_pad(1, 3, side="left", pad="0"),".csv")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
pollutantmean("C:\Users\wgates\Documents\RCode\Data\specdata", "test", 2)
pollutantmean("C:/Users/wgates/Documents/RCode/Data/specdata", "test", 2)
source('~/.active-rstudio-document')
pollutantmean("C:/Users/wgates/Documents/RCode/Data/specdata", "test", 2)
source('~/.active-rstudio-document')
pollutantmean("C:/Users/wgates/Documents/RCode/Data/specdata", "test", 2)
data
source('~/.active-rstudio-document')
pollutantmean("C:/Users/wgates/Documents/RCode/Data/specdata", "test", 2)
source('~/.active-rstudio-document')
pollutantmean("C:/Users/wgates/Documents/RCode/Data/specdata", "test", 2)
data
nrows(data)
nrow(data)
library(datasets)
data(iris)
?iris
iris$Sepal.Length
str(iris)
u <- iris.Species=virginica
u <- iris.Species = "virginica"
iris[iris.species="virginica"]
iris[iris$species="virginica"]
iris[iris$species=="virginica"]
iris[iris$species=="virginica",]
iris[species=="virginica"]
iris$species=="virginica"
iris$Species=="virginica"
iris$Sepal.Length[iris$Species="virginica"]
iris$Sepal.Length[iris$Species=="virginica"]
mean(iris$Sepal.Length[iris$Species=="virginica"])
mean(iris$Sepal.Length)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
library(datasets)
data(mtcars)
?mtcars
str(mtcars)
mean(mtcars$mpg[mtcars$cyl==6])
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
4cyl <- mean(mtcars$hp[mtcars$cyl==4])
four_cyl <- mean(mtcars$hp[mtcars$cyl==4])
eight_cyl <- mean(mtcars$hp[mtcars$cyl==8])
?mad
debug(ls)
ls
debug(ls)
ls
ls()
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
}
}
all.names <- .Internal(ls(envir, all.names))
quit
exit
exit
quit
exit()
quit()
end()
bye()
bye
debug()
C
c
four_cyl
eight_cyl
eight_cyl - four_cyl
q
q
C
set.seed(1)
rpois(5,2)
?rnorm
set.seed()
?ppois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
?rbinom
rbinom(12,1,1)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
x1 <- 15
x2 <- 13
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
library(datasets)
y
x1
y1
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(5,11)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(stdev, c(1.4,3.6,7.9,8.8))
evaluate(sd(c(1.4, 3.6, 7.9, 8.8)))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
submit()
submit()
submit()
telegram("with stupid assignments","for class")
submit()
mad_libs(c(place="here", adjective="green", noun="chihuahua"))
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lappy(flag_shapes,range)
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
taplly(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,
| flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
heads(plants)
head(plants)
dead(plants,10)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(0:1, 100, prob=c(0.3,0.7))
sample(0:1, 100, replace=TRUE, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(100, size=1, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
rpois(5, mean=10)
?rpois
rpois(5,10)
replicate(100,rpois(5,10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
ts <- "October 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plt
?plot
plot(x = cars$speed, y = cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$dist, y=cars$speed, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance", main="My Plot")
plot(cars, main="My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
data(mtcars)
?boxplot
boxplot(mtcars,mpg~cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
?unzip
unzip("activity.zip")
if(!file.exists("activity.zip")) error("Missing data files.")
?err
?error
?fail
?warn
?message
?stop
if(!file.exists("activity.zip")) warning("Missing data files.")
getwd()
setwd("~/RCode/Reproducable//RepData_PeerAssessment1/")
getwd()
setwd("~/RCode/Reproducable/RepData_PeerAssessment1/")
getwd()
file.exists("activity.csv")
file.exists("activity.zip")
unzip("activity.zip")
```{r}
library(data.table)
stepDataRaw
library(data.table)
zipfile <- "activity.zip"
datafile <- "activity.csv"
setwd("~/RCode/Reproducable/RepData_PeerAssessment1/")
if(!file.exists(datafile))
{
if(!file.exists(zipfile)) warning("Missing data files.")
unzip(zipfile)
}
stepDataRaw <- read.csv(datafile)
stepDataRaw
str(stepD)
str(stepDataRaw)
head(stepDataRaw)
names(stepDataRaw)
steps <- data.table(stepDataRaw)
steps
?filter
library(data.table)
?filter
?data.table
complete.cases(stepDataRaw)
stepDataRaw
stepDataRaw[(!is.na(stepDataRaw$steps)),]
head(stepDataRaw[(!is.na(stepDataRaw$steps)),])
nrows(stepDataRaw[(!is.na(stepDataRaw$steps)),])
nrow(stepDataRaw[(!is.na(stepDataRaw$steps)),])
steps <- stepDataRaw[complete.cases(stepDataRaw),]
nrow(steps)
steps <- data.table(steps)
steps[,sum(steps),by=steps$date]
steps[,sum(steps),by=date]
stepsPerDay <- steps[,sum(steps),by=date]
nrow(stepsPerDay)
str(stepsPerDay)
?hist
hist(stepsPerDay, breaks=53)
islands
str(islands)
hist(islands)
hist(stepsPerDay)
hist(stepsPerDay$V1)
names(stepsPerDay) <- c("Date", "TotalSteps")
setnames(stepsPerDay, names(stepsPerDay), c("Date", "Total.Steps"))
names(stepsPerDay)
hist(stepsPerDay)
hist(stepsPerDay$Total.Steps)
mean(stepsPerDay$Total.Steps)
median(stepsPerDay$Total.Steps)
hist(stepsPerDay$Total.Steps,xlab ="Steps Per Day", ylab="Number of Days")
hist(stepsPerDay$Total.Steps,xlab ="Steps Per Day", ylab="Number of Days", title="Test")
hist(stepsPerDay$Total.Steps,xlab ="Steps Per Day", ylab="Number of Days", main = "Jim")
hist(stepsPerDay$Total.Steps,xlab ="Steps Per Day", ylab="Number of Days")
?hist
